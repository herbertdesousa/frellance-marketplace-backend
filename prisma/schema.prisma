// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid                            String                           @unique @default(uuid())
  email                          String                           @unique
  name                           String?
  picture                        String?
  signInMethod                   String
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  UserContacts                   UserContacts[]
  UserNotificationOnChatMessages UserNotificationOnChatMessages[]
  Items                          Items[]
  AnalyticsRequestContact        AnalyticsRequestContact[]
  UserFavorites                  UserFavorites[]
  UserRecentsView                UserRecentsView[]
}

model UserContacts {
  id        String      @id() @default(uuid())
  user      User        @relation(fields: [userId], references: [uid], onDelete: Cascade)
  type      ContactType
  contact   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
}

enum ContactType {
  email
  whatsapp
  phone
}

model UserNotificationOnChatMessages {
  id        String   @id() @default(uuid())
  user      User     @relation(fields: [userId], references: [uid], onDelete: Cascade)
  value     Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}

model Items {
  id          String     @id() @default(uuid())
  name        String
  description String
  user        User       @relation(fields: [userId], references: [uid], onDelete: Cascade)
  userId      String
  itemPrice   ItemPrice?
  category    Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  ItemPicture             ItemPicture[]
  ItemAttributeValues     ItemAttributeValues[]
  itemPriceId             String?
  AnalyticsRequestContact AnalyticsRequestContact[]
  UserFavorites           UserFavorites[]
  UserRecentsView         UserRecentsView[]
  AdminItemHero           AdminItemHero[]
}

model ItemPrice {
  id     String        @id() @default(uuid())
  type   ItemPriceType @default(vender)
  value  String        @default("A Combinar")
  item   Items         @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String        @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ItemPriceType {
  alugar
  vender
}

model ItemPicture {
  id        String   @id() @default(uuid())
  url       String
  name      String
  item      Items    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categories {
  id        String   @id() @default(uuid())
  name      String   @unique
  slug      String   @unique
  iconName  String
  img_url   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Items             Items[]
  CategoryAttribute CategoryAttribute[]
}

model Attributes {
  id                    String             @id() @default(uuid())
  name                  String
  description           String?
  path                  String?
  type                  AttributesType
  refAttributeClass     RefAttributeClass? @relation(fields: [refAttributeClassName], references: [name], onDelete: SetNull)
  refAttributeClassName String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  AttributeValues   AttributeValues[]
  CategoryAttribute CategoryAttribute[]
}

model RefAttributeClass {
  name      String   @id() @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Attributes Attributes[]
}

enum AttributesType {
  selectable
  writable
  both
}

model AttributeValues {
  id           String     @id() @default(uuid())
  name         String
  attribute    Attributes @relation(fields: [attributesId], references: [id], onDelete: Cascade)
  attributesId String
  default      Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  ItemAttributeValues ItemAttributeValues[]
}

model CategoryAttribute {
  id           String     @id() @default(uuid())
  category     Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String
  attribute    Attributes @relation(fields: [attributesId], references: [id], onDelete: Cascade)
  attributesId String
  required     Boolean    @default(false)
  order        Int        @default(1)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ItemAttributeValues {
  id                String          @id() @default(uuid())
  attributeValue    AttributeValues @relation(fields: [attributeValuesId], references: [id], onDelete: Cascade)
  attributeValuesId String
  item              Items           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model AnalyticsRequestContact {
  id            String   @id() @default(uuid())
  userViewerUid User?    @relation(fields: [userUid], references: [uid], onDelete: Cascade)
  userUid       String?
  itemId        Items    @relation(fields: [itemsId], references: [id], onDelete: Cascade)
  itemsId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserFavorites {
  id        String   @id() @default(uuid())
  userId    User     @relation(fields: [userUid], references: [uid], onDelete: Cascade)
  userUid   String
  itemId    Items    @relation(fields: [itemsId], references: [id], onDelete: Cascade)
  itemsId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRecentsView {
  id        String   @id() @default(uuid())
  userId    User     @relation(fields: [userUid], references: [uid], onDelete: Cascade)
  userUid   String
  itemId    Items    @relation(fields: [itemsId], references: [id], onDelete: Cascade)
  itemsId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminItemHero {
  id        String   @id() @default(uuid())
  itemId    Items    @relation(fields: [itemsId], references: [id], onDelete: Cascade)
  itemsId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
